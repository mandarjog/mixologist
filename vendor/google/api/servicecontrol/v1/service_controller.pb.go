// Code generated by protoc-gen-go.
// source: google/api/servicecontrol/v1/service_controller.proto
// DO NOT EDIT!

package servicecontrol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/serviceconfig"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The request message of the Check method.
type CheckRequest struct {
	// The service name. The DNS address at which this service is available,
	// such as `"pubsub.googleapis.com"`.
	//
	// Please see `google.api.Service` for the definition of service name.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// The operation to be checked.
	Operation *Operation `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *CheckRequest) GetOperation() *Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// The response message of the Check method.
type CheckResponse struct {
	// The same operation_id value used in the CheckRequest.
	// Used for logging and diagnostics purpose.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	// Indicate the decision of the check.
	//
	// If no check errors are present, the service should process the operation.
	// Otherwise the service should use the list of errors to determine the
	// appropriate action.
	CheckErrors []*CheckError `protobuf:"bytes,2,rep,name=check_errors,json=checkErrors" json:"check_errors,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *CheckResponse) GetCheckErrors() []*CheckError {
	if m != nil {
		return m.CheckErrors
	}
	return nil
}

// The request message of the Report method.
type ReportRequest struct {
	// The service name. The DNS address at which this service is available,
	// such as `"pubsub.googleapis.com"`.
	//
	// Please see `google.api.Service` for the definition of service name.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// Operations to be reported.
	//
	// Typically the service should report one operation per request.
	// Putting multiple operations into a single request is allowed, but should
	// be used only when multiple operations are natually available at the time
	// of the report.
	//
	// If multiple operations are in a single request, the total request size
	// should be no larger than 1MB. See
	// [ReportResponse.report_errors][google.api.servicecontrol.v1.ReportResponse.report_errors]
	// for
	// partial failure behavior.
	Operations []*Operation `protobuf:"bytes,2,rep,name=operations" json:"operations,omitempty"`
}

func (m *ReportRequest) Reset()                    { *m = ReportRequest{} }
func (m *ReportRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()               {}
func (*ReportRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *ReportRequest) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

// The response message of the Report method.
type ReportResponse struct {
	// The partial failures, one for each `Operation` in the request that failed
	// processing. There are three possible combinations of the RPC status and
	// this list:
	//
	// 1. The combination of a successful RPC status and an empty `report_errors`
	//    list indicates a complete success where all `Operation`s in the
	//    request are processed successfully.
	// 2. The combination of a successful RPC status and a non-empty
	//    `report_errors` list indicates a partial success where some
	//    `Operation`s in the request are processed successfully. Each
	//    `Operation` that failed processing has a corresponding item
	//    in this list.
	// 3. A failed RPC status indicates a complete failure where none of the
	//    `Operation`s in the request is processed successfully.
	ReportErrors []*ReportResponse_ReportError `protobuf:"bytes,1,rep,name=report_errors,json=reportErrors" json:"report_errors,omitempty"`
}

func (m *ReportResponse) Reset()                    { *m = ReportResponse{} }
func (m *ReportResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportResponse) ProtoMessage()               {}
func (*ReportResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *ReportResponse) GetReportErrors() []*ReportResponse_ReportError {
	if m != nil {
		return m.ReportErrors
	}
	return nil
}

// Represents the processing error of one `Operation` in the request.
type ReportResponse_ReportError struct {
	// The
	// [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id]
	// value from the request.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	// Details of the error when processing the `Operation`.
	Status *google_rpc.Status `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ReportResponse_ReportError) Reset()                    { *m = ReportResponse_ReportError{} }
func (m *ReportResponse_ReportError) String() string            { return proto.CompactTextString(m) }
func (*ReportResponse_ReportError) ProtoMessage()               {}
func (*ReportResponse_ReportError) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3, 0} }

func (m *ReportResponse_ReportError) GetStatus() *google_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*CheckRequest)(nil), "google.api.servicecontrol.v1.CheckRequest")
	proto.RegisterType((*CheckResponse)(nil), "google.api.servicecontrol.v1.CheckResponse")
	proto.RegisterType((*ReportRequest)(nil), "google.api.servicecontrol.v1.ReportRequest")
	proto.RegisterType((*ReportResponse)(nil), "google.api.servicecontrol.v1.ReportResponse")
	proto.RegisterType((*ReportResponse_ReportError)(nil), "google.api.servicecontrol.v1.ReportResponse.ReportError")
}

func init() {
	proto.RegisterFile("google/api/servicecontrol/v1/service_controller.proto", fileDescriptor6)
}

var fileDescriptor6 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0x66, 0x22, 0x06, 0x7a, 0x36, 0x11, 0x9c, 0x0b, 0x09, 0x8b, 0x17, 0xe9, 0x5c, 0xd8, 0x90,
	0xc6, 0x59, 0x1a, 0x11, 0x24, 0x20, 0x42, 0x4b, 0x91, 0x22, 0x68, 0xd9, 0xde, 0x2a, 0x61, 0xdc,
	0x8e, 0xeb, 0x62, 0xb2, 0x33, 0xce, 0x4c, 0x83, 0x50, 0x44, 0xf0, 0x01, 0xbc, 0xd0, 0xa7, 0xf1,
	0x21, 0xbc, 0xf2, 0x15, 0x7c, 0x08, 0x2f, 0x65, 0xe7, 0x67, 0xbb, 0xb5, 0xb0, 0x6c, 0xae, 0x92,
	0x39, 0x7f, 0xdf, 0x77, 0xbe, 0x6f, 0x0f, 0x3c, 0xce, 0x85, 0xc8, 0x57, 0x3c, 0x61, 0xb2, 0x48,
	0x34, 0x57, 0x9b, 0x22, 0xe3, 0x99, 0x28, 0x8d, 0x12, 0xab, 0x64, 0x73, 0x10, 0x22, 0x4b, 0x1f,
	0x5a, 0x71, 0x45, 0xa5, 0x12, 0x46, 0xe0, 0xfb, 0xae, 0x8d, 0x32, 0x59, 0xd0, 0xeb, 0x6d, 0x74,
	0x73, 0x10, 0x9f, 0xf8, 0x6c, 0x2e, 0x56, 0xac, 0xcc, 0xa9, 0x50, 0x79, 0x92, 0xf3, 0xd2, 0x76,
	0x26, 0x2e, 0xc5, 0x64, 0xa1, 0xff, 0xc3, 0x7c, 0x57, 0xe4, 0x09, 0x2b, 0x4b, 0x61, 0x98, 0x29,
	0x44, 0xa9, 0x1d, 0x50, 0x4c, 0x5b, 0xf9, 0x65, 0xef, 0x79, 0xf6, 0x61, 0xc9, 0x95, 0x12, 0x9e,
	0x58, 0x3c, 0x6b, 0xad, 0x17, 0x92, 0x2b, 0x3b, 0xde, 0x57, 0x3f, 0xed, 0x46, 0x54, 0xc9, 0x2c,
	0xd1, 0x86, 0x99, 0x0b, 0xed, 0x7f, 0x5c, 0x3b, 0xf9, 0x04, 0x83, 0xa3, 0x8a, 0x41, 0xca, 0x3f,
	0x5e, 0x70, 0x6d, 0xf0, 0x2e, 0x0c, 0x82, 0x62, 0x25, 0x5b, 0xf3, 0x11, 0x1a, 0xa3, 0xc9, 0x4e,
	0x1a, 0xf9, 0xd8, 0x4b, 0xb6, 0xe6, 0xf8, 0x18, 0x76, 0x6a, 0x12, 0xa3, 0xde, 0x18, 0x4d, 0xa2,
	0xf9, 0x1e, 0x6d, 0x13, 0x93, 0xbe, 0x0a, 0xe5, 0xe9, 0x55, 0x27, 0xf9, 0x02, 0x43, 0x8f, 0xac,
	0xa5, 0x28, 0x35, 0xaf, 0xa0, 0xeb, 0xec, 0xb2, 0x38, 0x0f, 0xd0, 0x75, 0xec, 0xe4, 0x1c, 0xbf,
	0x80, 0x41, 0x43, 0x2f, 0x3d, 0xea, 0x8d, 0x6f, 0x4d, 0xa2, 0xf9, 0xa4, 0x1d, 0xdd, 0xa2, 0x1c,
	0x57, 0x0d, 0x69, 0x94, 0xd5, 0xff, 0x35, 0xb9, 0x84, 0x61, 0xca, 0xa5, 0x50, 0x66, 0x8b, 0xdd,
	0x9f, 0x03, 0xd4, 0x7c, 0x02, 0x7c, 0xe7, 0xe5, 0x1b, 0xad, 0xe4, 0x17, 0x82, 0x3b, 0x01, 0xdd,
	0xef, 0xff, 0x06, 0x86, 0xca, 0x46, 0xc2, 0x76, 0xc8, 0x8e, 0x7f, 0xd2, 0x3e, 0xfe, 0xfa, 0x10,
	0xff, 0x74, 0xdb, 0x0e, 0xd4, 0xd5, 0x43, 0xc7, 0xaf, 0x21, 0x6a, 0x24, 0xbb, 0xa8, 0x3d, 0x85,
	0xbe, 0xfb, 0x56, 0xbc, 0xcb, 0x38, 0x30, 0x51, 0x32, 0xa3, 0x67, 0x36, 0x93, 0xfa, 0x8a, 0xf9,
	0xcf, 0x1e, 0xdc, 0x3d, 0x73, 0xe4, 0x8e, 0xea, 0x4b, 0xc3, 0xdf, 0x10, 0xdc, 0xb6, 0xf2, 0xe3,
	0x69, 0x07, 0x8f, 0xbc, 0x0f, 0xf1, 0x7e, 0xa7, 0x5a, 0xb7, 0x30, 0x99, 0x7d, 0xfd, 0xfd, 0xe7,
	0x47, 0xef, 0x01, 0xd9, 0x6d, 0x1c, 0xbb, 0x4e, 0x2e, 0x9b, 0x46, 0x7e, 0x5e, 0x58, 0xdb, 0x17,
	0x68, 0x8a, 0xbf, 0x23, 0xe8, 0x3b, 0x15, 0xf0, 0x7e, 0x37, 0x5d, 0x1d, 0xa5, 0xd9, 0x36, 0x26,
	0x90, 0x87, 0x96, 0xd3, 0x1e, 0x21, 0x6d, 0x9c, 0x9c, 0x39, 0x0b, 0x34, 0x3d, 0x7c, 0x06, 0xe3,
	0x4c, 0xac, 0x5b, 0x11, 0x0e, 0xef, 0xdd, 0x10, 0xf7, 0xb4, 0xba, 0xdf, 0x53, 0xf4, 0x17, 0xa1,
	0xb7, 0x7d, 0x7b, 0xcb, 0x8f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x92, 0x1c, 0x9f, 0x3a, 0x0a,
	0x05, 0x00, 0x00,
}
